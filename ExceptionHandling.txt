
class CountryNotValidException extends Exception {
    public CountryNotValidException(String message) {
        super(message);
    }
}

class EmployeeNameInvalidException extends Exception {
    public EmployeeNameInvalidException(String message) {
        super(message);
    }
}

class TaxNotEligibleException extends Exception {
    public TaxNotEligibleException(String message) {
        super(message);
    }
    public class TaxCalculator {
        public double calculateTax(String empName, boolean isIndian, double empSal)
                throws CountryNotValidException, EmployeeNameInvalidException, TaxNotEligibleException {

            if (!isIndian) {
                throw new CountryNotValidException("The employee should be an Indian citizen for calculating tax.");
            }

            if (empName == null || empName.trim().isEmpty()) {
                throw new EmployeeNameInvalidException("The employee name cannot be empty.");
            }

            double taxAmount = 0;

            if (empSal > 100000 && isIndian) {
                taxAmount = empSal * 8 / 100;
            } else if (empSal >= 50000 && empSal <= 100000 && isIndian) {
                taxAmount = empSal * 6 / 100;
            } else if (empSal >= 30000 && empSal < 50000 && isIndian) {
                taxAmount = empSal * 5 / 100;
            } else if (empSal >= 10000 && empSal < 30000 && isIndian) {
                taxAmount = empSal * 4 / 100;
            } else {
                throw new TaxNotEligibleException("The employee does not need to pay tax.");
            }

            return taxAmount;
        }
    }
    public class CalculatorSimulator {
        public static void main(String[] args) {
            TaxCalculator calculator = new TaxCalculator();

            try {
                double tax = calculator.calculateTax("Ron", false, 34000);
                System.out.println("Tax amount is " + tax);
            } catch (CountryNotValidException e) {
                System.out.println(e.getMessage());
            } catch (EmployeeNameInvalidException e) {
                System.out.println(e.getMessage());
            } catch (TaxNotEligibleException e) {
                System.out.println(e.getMessage());
            }

            try {
                double tax = calculator.calculateTax("Tim", true, 1000);
                System.out.println("Tax amount is " + tax);
            } catch (CountryNotValidException e) {
                System.out.println(e.getMessage());
            } catch (EmployeeNameInvalidException e) {
                System.out.println(e.getMessage());
            } catch (TaxNotEligibleException e) {
                System.out.println(e.getMessage());
            }

            try {
                double tax = calculator.calculateTax("Jack", true, 55000);
                System.out.println("Tax amount is " + tax);
            } catch (CountryNotValidException e) {
                System.out.println(e.getMessage());
            } catch (EmployeeNameInvalidException e) {
                System.out.println(e.getMessage());
            } catch (TaxNotEligibleException e) {
                System.out.println(e.getMessage());
            }

            try {
                double tax = calculator.calculateTax("", true, 30000);
                System.out.println("Tax amount is " + tax);
            } catch (CountryNotValidException e) {
                System.out.println(e.getMessage());
            } catch (EmployeeNameInvalidException e) {
                System.out.println(e.getMessage());
            } catch (TaxNotEligibleException e) {
                System.out.println(e.getMessage());
            }
        }
    }
 

OUTPUT

The employee should be an Indian citizen for calculating tax.
The employee does not need to pay tax
Tax amount is 3300.0
The employee name cannot be empty.
